//Changes will be encoded in a stack to ensure that moves can be undone, w/ numbers pointing to each case, chars.
	[x] //pinnedBlackB - 1 then next 8 bytes
	[x] //pinnedBlackR - 2 then..
	[x] //pinnedWhiteB - 3 then..
	[x] //pinnedWhiteR - 4 then..
	[x] //whiteAttackLane - 5 then..
	[x] //blackAttackLane - 6 then..
	[x] //checkmate - 7
	[x] //areThereLegalMoves - 8
	[x] //wrCastle - 9
	[x] //wlCastle = 10
	[x] //brCastle - 11
	[x] //blCastle - 12
	[~] //castleHappen - 13 ~ DOESN'T need to be remembered
	[~] //enPassantHappen - 14 ~ DOESN'T need to be stored, is not something that needs to be remembered, resets each time
	[x] //enPassant - 15 then next 8 bytes
	[x] //castleFrom - 16 then next 8 bytes
	[x] //castleTo - 17 then next 8 bytes
	[x] //checkCount 18 - then next 4 bytes
	[x] //inCheck - 19
	[x] //kingMustMove - 20
	[x] //enPassantTake - 21 then next 4 byets
	[x] //pawnToQueen - 22 ~ For booleans store 0 - F and 1 - T
	[x] //state change separate stack named movesMade(player moved) state idx next 4 bytes ~ old state next 8 bytes ~, can repeat this old pattern: NEEDS TO BE CHANGED CURRENTLY IT IS IMPLEMENTED WRONG
			check next char then next long - 200 is the beginning of a move here, keep undoing until reaching empty stack or 200
	[x] //beginning of move  - 200 - this has been handled (Keep going until you read 200)
	[x] // roll back state change if false is returned instead of true
	// IF A VALUE IS SET TWICE, AND THE ORDER IS CONSISTENT, ONLY STORE FIRST SET
	// REMEMBER, ROLLBACK ALWAYS WHEN GENERATING MOVE BETWEEN EACH NEW MOVE ROLLBACK
	[x] // in generate new move track changes after that, call undo and reset shit between undo until getting to 201
			//so in other words, in the beginning of the generate mvoes inside of loop that generates each move push 201, at the end call bitboard.undo()

			
//TOUGH VALUES LIKE ENPASSANT, JUST STORE IT EACH TIME IN THE BEGINNING